/*

PROJECT:        frfr.me
AUTHOR:         Frank Frick
COMPANY:        -

*/
/* framework */
/* project */
/**
 *
 * Reduces code for min-width media queries
 *
 */
/**
 *
 * CSS arrows
 *
 * @param width           :  px, em
 * @param height          :  px, em
 * @param direction       :  up, down, left, right
 * @param color           :  hex, rgb
 *
 * Usage:	.arrow-down {
 * 				@include arrow(5em, 10em, down, #FFCC66);
 * 			}
 *
 * Source: http://codepen.io/minimalmonkey/pen/KIaGD
 *
 */
/**
 *
 * Prevent collapsing of the height of the container of floated elements.
 *
 */
/**
 *
 * Hides text inside an element. This way the text is still available for SEO and accessability.
 *
 */
/**
 *
 * Animate an underline on hover over the element.
 *
 */
/**
 *
 * Undo if not wanted for a certain instance on which the rule is applied (for example if it's applied to all links but there's one on which you don't need it)
 *
 */
/* sizes */
/* media query breakpoints */
/* colors */
/* animation */
/**
 *	Usage:	transform: scale(0.5);
 *			opacity: 0;
 *			&.animate-in {
 *				animation: pop-in-with-spring 0.75s ease-out forwards;
 *			}
 */
@keyframes pop-in-with-spring {
  0% {
    transform: scale(0.5);
    opacity: 0;
  }
  20% {
    transform: scale(1.2);
    opacity: 1;
  }
  40% {
    transform: scale(0.85);
    opacity: 1;
  }
  60% {
    transform: scale(1.1);
    opacity: 1;
  }
  80% {
    transform: scale(0.95);
    opacity: 1;
  }
  100% {
    transform: scale(1);
    opacity: 1;
  }
}

@keyframes pop-in {
  0% {
    transform: scale(0.8);
    opacity: 0;
  }
  100% {
    transform: scale(1);
    opacity: 1;
  }
}

/**
 *	Usage:	transform-origin: center center;
 *			animation: smooth-scale 750ms cubic-bezier(.1,.82,.25,1);
 *
 *	Source: https://web.whatsapp.com/
 */
@keyframes smooth-scale {
  0%, 20% {
    transform: scale(0, 0);
  }
  100% {
    transform: scale 1, 1;
  }
}

/**
 *	In addition to this set a height on the .vertical-center-container element and it will act
 *	as the min-height.
 */
* {
  padding: 0;
  margin: 0;
}

/**
 *	This box-sizing reset makes it easy to change the box-sizing for an element
 *	but not for its children.
 */
*, *::before, *::after {
  box-sizing: border-box;
}

/**
 *	In comparison the following box-sizing reset makes it easy to change the
 *	box-sizing for an element and its children.
 *
 *	Source: http://css-tricks.com/inheriting-box-sizing-probably-slightly-better-best-practice/
 */
/* html {
	box-sizing: border-box;
}
*, *::before, *::after {
	box-sizing: inherit;
} */
body {
  -webkit-text-size-adjust: 100%;
  /* prevents iOS from changing font-size when switching to landscape mode */
}

main {
  display: block;
}

ul {
  list-style: none;
}

a img {
  border: none;
}

button {
  background: none;
  border: none;
  cursor: pointer;
  font-size: 1em;
}

/* family */
html {
  font-family: 'Source Sans Pro', 'Helvetica Neue', Helvetica, Arial, sans-serif;
}

code {
  font-family: monospace;
}

/* weight */
* {
  font-weight: 300;
}

h1, h2, h3, h4, h5, h6 {
  font-weight: 900;
}

/* style */
* {
  font-style: normal;
}

html {
  -webkit-font-smoothing: antialiased;
  font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

em {
  font-style: italic;
}

h1, h2, h3, h4, h5, h6 {
  letter-spacing: 0.01em;
}

/* size */
html {
  /* root */
  font-size: pxToEm(20px, 16px);
}

/* line height */
html {
  line-height: 1;
}

h1, h2, h3, h4, h5, h6 {
  line-height: 1.2;
}

p {
  line-height: 1.8;
}

/* spacing */
h1, h2, h3, h4, h5, h6 {
  margin-top: 0;
  margin-bottom: 1em;
}

* + h2, * + h3, * + h4, * + h5, * + h6 {
  margin-top: 2em;
}

p {
  margin-bottom: 1.5em;
}

html {
  color: black;
  background-color: white;
}

body {
  overflow-x: hidden;
}

::selection {
  color: #fff;
  background: #000;
}

::-moz-selection {
  color: #fff;
  background: #000;
}

a {
  color: #1E0FBE;
}

a:hover {
  color: ligthen(#1E0FBE, 20);
}

a:visited {
  color: #609;
}

img,
video,
iframe {
  max-width: 100%;
}

.width-limit {
  max-width: 75rem;
  margin: 0 auto;
  padding-right: 0.75rem;
  padding-left: 0.75rem;
}

@media (min-width: pxToEm(500px, 16px)) {
  .width-limit {
    padding-right: 0;
    padding-left: 0;
    width: 80%;
  }
}
